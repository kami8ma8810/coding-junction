@mixin sorts-mill-goudy {
  font-family: 'SortsMillGoudy', sans-serif;
}
@mixin roboto-semiBold {
  font-family: 'RobotoMonoSemiBold', sans-serif;
}
@mixin roboto-regular {
  font-family: 'RobotoMonoRegular', sans-serif;
}
@mixin roboto-light {
  font-family: 'RobotoMonoLight', sans-serif;
}
@mixin roboto-lightItalic {
  font-family: 'RobotoMonoLightItalic', sans-serif;
  font-style: italic;
}
@mixin koburinaW3 {
  font-family: 'koburinaW3', sans-serif;
}
@mixin koburinaW6 {
  font-family: 'koburinaW6', sans-serif;
}
@mixin mainichiMincho {
  font-family: 'mainichiMincho', serif;
}
@mixin bodoni {
  font-family: 'Bodoni', sans-serif;
}
@mixin bodoni-italic {
  font-family: 'BodoniItalic', sans-serif;
  font-style: italic;
}
@mixin itc {
  font-family: 'ITC', sans-serif;
}
@mixin avenir {
  font-family: 'Avenir', sans-serif;
}
@mixin gotham {
  font-family: 'gotham', sans-serif;
  font-weight: normal;
}
@mixin josefin {
  font-family: 'Josefin Sans', sans-serif;
}
@mixin yumin {
  font-family: '游明朝体', 'Yu Mincho', YuMincho, 'ヒラギノ明朝 Pro',
    'Hiragino Mincho Pro', 'MS P明朝', 'MS PMincho', serif;
}

@mixin yugo {
  font-family: 'Yu Gothic Medium', '游ゴシック Medium', YuGothic, '游ゴシック体',
    'ヒラギノ角ゴ Pro W3', 'メイリオ', sans-serif;
}
@mixin aotfGothic {
  font-family: 'aotfGothicMedium', sans-serif;
}
@mixin font-hash {
  font-family: 'RobotoMonoRegularHash', '游明朝体', 'Yu Mincho', YuMincho,
    'ヒラギノ明朝 Pro', 'Hiragino Mincho Pro', 'MS P明朝', 'MS PMincho', serif;
}

@font-face {
  font-family: minmoji;
  src: url('https://minmoji.ucda.jp/fontseot/https%3A__coding-junction.com');
  src: local('minmoji'),
    url('https://minmoji.ucda.jp/fontswoff/https%3A__coding-junction.com')
      format('woff'),
    url('https://minmoji.ucda.jp/fonts/https%3A__coding-junction.com')
      format('opentype');
}
@mixin minmoji {
  font-family: minmoji, sans-serif;
}

// 2行以上は文末を「…」にする（デフォルトは2行
@mixin clamp($line: 2) {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;
}

// メディアクエリ
@mixin mq($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  } @else {
    @error "指定されたブレークポイントは定義されていません。"+"指定できるブレークポイントは次のとおりです。 -> #{map-keys($breakpoints)}";
  }
}

// アニメーション
@mixin animation(
  $name,
  $duration: 1s,
  $timing-function: ease,
  $delay: 0s,
  $iteration-count: 1,
  $direction: normal,
  $fill-mode: forwards
) {
  animation: {
    name: $name;
    duration: $duration;
    timing-function: $timing-function;
    delay: $delay;
    iteration-count: $iteration-count;
    direction: $direction;
    fill-mode: $fill-mode;
  }
}
